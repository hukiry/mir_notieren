---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2022/10/16 10:30
---

---离线时间，心跳时间
---@class GameCenterMgr
local GameCenterMgr = Class()
---@private
function GameCenterMgr:ctor()
    ---无用户操作累计时间
    ---@type number
    self.noUserActionTime = 0
end

---初始化游戏中心
function GameCenterMgr:Init()
    Single.TimerManger():RemoveHandler(self)
    Single.TimerManger():DoTime(self, self.OnPerSecond, 1, -1)
    ---服务器时间
    self.messageTab = {
        [1]={ txt = "切换设备", waitTime = 0, maxTime = 60, callBack = function()
            Single.Request().SendBindLogout(EHttpLoginState.ChangeDevice)
        end},
        [2]={ txt = "心跳", waitTime = 0, maxTime = 80, callBack = function()
            Single.Request().SendHeart()
        end},
        [3]={ txt = "活动", waitTime = 0, maxTime = 120,  callBack = function()
            SingleData.Activity():SendHttp()
        end},

        [4]={ txt = "数据上传", waitTime = 0, maxTime = 30,  callBack = function()
            Single.AutoTask():SaveData()
        end},
    }

    self.index = 1
end

---@param seconds number 置于后台时间
---@param isPause boolean
function GameCenterMgr:OnApplicationPause(isPause, seconds)
    if isPause then
        ---切换后台保存数据
        self:SaveHomeData(isPause)
    else

    end
end

---每秒更新
function GameCenterMgr:OnPerSecond()
    if Single.Player().roleId >0  then
        Single.AutoTask():UpdateTaskTime()
        if Single.Http():IsHaveNetwork() then
            for _, v in ipairs(self.messageTab) do
                v.waitTime = v.waitTime + 1
                if v.waitTime>=v.maxTime then
                    v.waitTime = 0
                    v.callBack()
                end
            end
        end
    end
end

---保存家园数据
function GameCenterMgr:SaveHomeData(isPause)
    Single.PlayerPrefs():SetInt(EGameSetting.OfflineTime, Util.Time().GetServerTime())
    Single.AutoTask():SaveData()
    Single.Player():SaveRoleData(isPause)
end

---切换游戏
function GameCenterMgr:LoginOut()
    Single.TimerManger():RemoveHandler(self)

    UIManager:CloseAllWindow()---关闭所有窗口
    Single.TimerManger():RemoveAllHandler()---移除所有计时器
    ---清空数据
    Single.InitData()
    SingleData.InitData()
    SingleAssist.Clear()

    ---关闭所有窗口
    UIManager:OpenWindow(ViewID.Loading, nil, Mathf.Random(0.01,0.50), function()
        UIManager:DestroyAll()---消耗所有窗口
        EventDispatch:RemoveAllEvent()---移除所有事件
    end)

    ---消耗UI对象池
    UIItemPool.DestroyAll()
    UIPanelPool.DestroyAll()
    ---清除对象池
    GameObjectPool.ClearAll()

    ---删除永久的key
    --Single.PlayerData():DeleteAll()
    ---释放所有的图集
    local arrayPath ={
        EAtlasResPath.Item,
        EAtlasResPath.Scene
    }
    for _, v in ipairs(arrayPath) do
        ResManager:Unload(v)
    end

    SingleData.Login():Logout()
    StartCoroutine(function()
        WaitForSeconds(1)
        SingleData.Login():ConnectServer()
    end)
end

return GameCenterMgr