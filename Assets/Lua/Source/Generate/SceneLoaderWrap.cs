//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SceneLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SceneLoader), typeof(System.Object));
		L.RegFunction("InitPreloadedQueue", InitPreloadedQueue);
		L.RegFunction("StartPreloaded", StartPreloaded);
		L.RegFunction("IsDone", IsDone);
		L.RegFunction("UnloadAll", UnloadAll);
		L.RegFunction("New", _CreateSceneLoader);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("progressCallback", get_progressCallback, set_progressCallback);
		L.RegVar("finishCallback", get_finishCallback, set_finishCallback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSceneLoader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SceneLoader obj = new SceneLoader();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SceneLoader.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitPreloadedQueue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				SceneLoader obj = (SceneLoader)ToLua.CheckObject<SceneLoader>(L, 1);
				string[] arg0 = ToLua.CheckStringArray(L, 2);
				obj.InitPreloadedQueue(arg0);
				return 0;
			}
			else if (count == 3)
			{
				SceneLoader obj = (SceneLoader)ToLua.CheckObject<SceneLoader>(L, 1);
				string[] arg0 = ToLua.CheckStringArray(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.InitPreloadedQueue(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: SceneLoader.InitPreloadedQueue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartPreloaded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject<SceneLoader>(L, 1);
			obj.StartPreloaded();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject<SceneLoader>(L, 1);
			bool o = obj.IsDone();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneLoader obj = (SceneLoader)ToLua.CheckObject<SceneLoader>(L, 1);
			obj.UnloadAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_progressCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			System.Action<float> ret = obj.progressCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index progressCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_finishCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			System.Action ret = obj.finishCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index finishCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_progressCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			System.Action<float> arg0 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 2);
			obj.progressCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index progressCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_finishCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneLoader obj = (SceneLoader)o;
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.finishCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index finishCallback on a nil value");
		}
	}
}

