//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Hukiry_AssetsLoaderMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Hukiry.AssetsLoaderMgr), typeof(System.Object));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("LoadAsset", LoadAsset);
		L.RegFunction("LoadAllAsset", LoadAllAsset);
		L.RegFunction("LoadAsync", LoadAsync);
		L.RegFunction("LoadAllAsync", LoadAllAsync);
		L.RegFunction("LoadSceneAsync", LoadSceneAsync);
		L.RegFunction("ToCacheAssets", ToCacheAssets);
		L.RegFunction("IsLoad", IsLoad);
		L.RegFunction("Unload", Unload);
		L.RegFunction("UnloadImmediate", UnloadImmediate);
		L.RegFunction("UnloadUnusedAssets", UnloadUnusedAssets);
		L.RegFunction("UnLoadAllAssets", UnLoadAllAssets);
		L.RegFunction("New", _CreateHukiry_AssetsLoaderMgr);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("LogLoadInfo", get_LogLoadInfo, set_LogLoadInfo);
		L.RegVar("LogUnloadInfo", get_LogUnloadInfo, set_LogUnloadInfo);
		L.RegVar("CacheMarkList", get_CacheMarkList, set_CacheMarkList);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHukiry_AssetsLoaderMgr(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Hukiry.AssetsLoaderMgr obj = new Hukiry.AssetsLoaderMgr();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Hukiry.AssetsLoaderMgr.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
			bool o = Hukiry.AssetsLoaderMgr.Initialize(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Object o = Hukiry.AssetsLoaderMgr.LoadAsset(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			object[] o = Hukiry.AssetsLoaderMgr.LoadAllAsset(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Hukiry.OnAssetLoadedCallback<UnityEngine.Object> arg1 = (Hukiry.OnAssetLoadedCallback<UnityEngine.Object>)ToLua.CheckDelegate<Hukiry.OnAssetLoadedCallback<UnityEngine.Object>>(L, 2);
				Hukiry.AssetsLoaderMgr.LoadAsync(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Hukiry.OnAssetLoadedCallback<UnityEngine.Object> arg1 = (Hukiry.OnAssetLoadedCallback<UnityEngine.Object>)ToLua.CheckDelegate<Hukiry.OnAssetLoadedCallback<UnityEngine.Object>>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				Hukiry.AssetsLoaderMgr.LoadAsync(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Hukiry.AssetsLoaderMgr.LoadAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			Hukiry.OnAssetListLoadedCallback<UnityEngine.Object> arg1 = (Hukiry.OnAssetListLoadedCallback<UnityEngine.Object>)ToLua.CheckDelegate<Hukiry.OnAssetListLoadedCallback<UnityEngine.Object>>(L, 2);
			Hukiry.AssetsLoaderMgr.LoadAllAsync(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSceneAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<float> arg1 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 2);
			System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			Hukiry.AssetsLoaderMgr.LoadSceneAsync(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToCacheAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Hukiry.AssetsLoaderMgr.ToCacheAssets(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = Hukiry.AssetsLoaderMgr.IsLoad(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unload(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Hukiry.AssetsLoaderMgr.Unload(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				Hukiry.AssetsLoaderMgr.Unload(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				Hukiry.AssetsLoaderMgr.Unload(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Hukiry.AssetsLoaderMgr.Unload");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadImmediate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Hukiry.AssetsLoaderMgr.UnloadImmediate(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Hukiry.AssetsLoaderMgr.UnloadImmediate(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Hukiry.AssetsLoaderMgr.UnloadImmediate");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadUnusedAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			Hukiry.AssetsLoaderMgr.UnloadUnusedAssets(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadAllAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Hukiry.AssetsLoaderMgr.UnLoadAllAssets();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogLoadInfo(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Hukiry.AssetsLoaderMgr.LogLoadInfo);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogUnloadInfo(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Hukiry.AssetsLoaderMgr.LogUnloadInfo);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CacheMarkList(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Hukiry.AssetsLoaderMgr.CacheMarkList);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Hukiry.AssetsLoaderMgr.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogLoadInfo(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			Hukiry.AssetsLoaderMgr.LogLoadInfo = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogUnloadInfo(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			Hukiry.AssetsLoaderMgr.LogUnloadInfo = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CacheMarkList(IntPtr L)
	{
		try
		{
			System.Collections.Generic.HashSet<string> arg0 = (System.Collections.Generic.HashSet<string>)ToLua.CheckObject<System.Collections.Generic.HashSet<string>>(L, 2);
			Hukiry.AssetsLoaderMgr.CacheMarkList = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

