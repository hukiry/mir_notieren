//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_UI_InputField_LineTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.UI.InputField.LineType));
		L.RegVar("SingleLine", get_SingleLine, null);
		L.RegVar("MultiLineSubmit", get_MultiLineSubmit, null);
		L.RegVar("MultiLineNewline", get_MultiLineNewline, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<UnityEngine.UI.InputField.LineType>.Check = CheckType;
		StackTraits<UnityEngine.UI.InputField.LineType>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.UI.InputField.LineType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(UnityEngine.UI.InputField.LineType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SingleLine(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.UI.InputField.LineType.SingleLine);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MultiLineSubmit(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.UI.InputField.LineType.MultiLineSubmit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MultiLineNewline(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.UI.InputField.LineType.MultiLineNewline);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.UI.InputField.LineType o = (UnityEngine.UI.InputField.LineType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

