//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class RootCanvasWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(RootCanvas), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("IsTouchAllUI", IsTouchAllUI);
		L.RegFunction("IsTouchMainUI", IsTouchMainUI);
		L.RegFunction("GetOverUI", GetOverUI);
		L.RegFunction("GetSymbols", GetSymbols);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, set_Instance);
		L.RegVar("UICamera", get_UICamera, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsTouchAllUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			RootCanvas obj = (RootCanvas)ToLua.CheckObject<RootCanvas>(L, 1);
			bool o = obj.IsTouchAllUI();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsTouchMainUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			RootCanvas obj = (RootCanvas)ToLua.CheckObject<RootCanvas>(L, 1);
			bool o = obj.IsTouchMainUI();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOverUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			RootCanvas obj = (RootCanvas)ToLua.CheckObject<RootCanvas>(L, 1);
			UnityEngine.GameObject o = obj.GetOverUI();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSymbols(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RootCanvas obj = (RootCanvas)ToLua.CheckObject<RootCanvas>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.GetSymbols(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, RootCanvas.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UICamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RootCanvas obj = (RootCanvas)o;
			UnityEngine.Camera ret = obj.UICamera;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UICamera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instance(IntPtr L)
	{
		try
		{
			RootCanvas arg0 = (RootCanvas)ToLua.CheckObject<RootCanvas>(L, 2);
			RootCanvas.Instance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

