//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Hukiry_Socket_NetManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Hukiry.Socket.NetManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetOnSocketConnectedFunction", SetOnSocketConnectedFunction);
		L.RegFunction("SetOnSocketErrorFunction", SetOnSocketErrorFunction);
		L.RegFunction("SetOnRecvPacketFunction", SetOnRecvPacketFunction);
		L.RegFunction("SetPlatformIPFunction", SetPlatformIPFunction);
		L.RegFunction("SetQueueOnMainThread", SetQueueOnMainThread);
		L.RegFunction("SendPacket", SendPacket);
		L.RegFunction("OpenConnection", OpenConnection);
		L.RegFunction("CloseConnection", CloseConnection);
		L.RegFunction("IsConnected", IsConnected);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ins", get_ins, set_ins);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnSocketConnectedFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
			Hukiry.Socket.SocketConnectedDelegate arg0 = (Hukiry.Socket.SocketConnectedDelegate)ToLua.CheckDelegate<Hukiry.Socket.SocketConnectedDelegate>(L, 2);
			obj.SetOnSocketConnectedFunction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnSocketErrorFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
			Hukiry.Socket.OnSocketError arg0 = (Hukiry.Socket.OnSocketError)ToLua.CheckDelegate<Hukiry.Socket.OnSocketError>(L, 2);
			obj.SetOnSocketErrorFunction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOnRecvPacketFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
			Hukiry.Socket.OnDataReceived arg0 = (Hukiry.Socket.OnDataReceived)ToLua.CheckDelegate<Hukiry.Socket.OnDataReceived>(L, 2);
			obj.SetOnRecvPacketFunction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPlatformIPFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
			Hukiry.Socket.PlatformIPHandle arg0 = (Hukiry.Socket.PlatformIPHandle)ToLua.CheckDelegate<Hukiry.Socket.PlatformIPHandle>(L, 2);
			obj.SetPlatformIPFunction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetQueueOnMainThread(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
			Hukiry.Socket.LoomQueueOnMainThread arg0 = (Hukiry.Socket.LoomQueueOnMainThread)ToLua.CheckDelegate<Hukiry.Socket.LoomQueueOnMainThread>(L, 2);
			obj.SetQueueOnMainThread(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendPacket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
			obj.SendPacket(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenConnection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.OpenConnection(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseConnection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.CloseConnection(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.CloseConnection(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Hukiry.Socket.NetManager.CloseConnection");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.NetManager obj = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 1);
			bool o = obj.IsConnected();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ins(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Hukiry.Socket.NetManager.ins);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ins(IntPtr L)
	{
		try
		{
			Hukiry.Socket.NetManager arg0 = (Hukiry.Socket.NetManager)ToLua.CheckObject<Hukiry.Socket.NetManager>(L, 2);
			Hukiry.Socket.NetManager.ins = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

