//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIButtonListenerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIButtonListener), typeof(UnityEngine.UIButton));
		L.RegFunction("Get", Get);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<UnityEngine.GameObject>(L, 1))
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Transform>(L, 1))
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.MonoBehaviour>(L, 1))
			{
				UnityEngine.MonoBehaviour arg0 = (UnityEngine.MonoBehaviour)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.EventSystems.UIBehaviour>(L, 1))
			{
				UnityEngine.EventSystems.UIBehaviour arg0 = (UnityEngine.EventSystems.UIBehaviour)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Behaviour>(L, 1))
			{
				UnityEngine.Behaviour arg0 = (UnityEngine.Behaviour)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Component>(L, 1))
			{
				UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<Hukiry.UI.AtlasImage>(L, 1))
			{
				Hukiry.UI.AtlasImage arg0 = (Hukiry.UI.AtlasImage)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.UI.Text>(L, 1))
			{
				UnityEngine.UI.Text arg0 = (UnityEngine.UI.Text)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.UI.Image>(L, 1))
			{
				UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.UI.RawImage>(L, 1))
			{
				UnityEngine.UI.RawImage arg0 = (UnityEngine.UI.RawImage)ToLua.ToObject(L, 1);
				UIButtonListener o = UIButtonListener.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIButtonListener.Get");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

