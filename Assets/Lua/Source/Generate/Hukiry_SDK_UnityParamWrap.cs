//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Hukiry_SDK_UnityParamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Hukiry.SDK.UnityParam), null);
		L.RegFunction("New", _CreateHukiry_SDK_UnityParam);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("funType", get_funType, set_funType);
		L.RegVar("jsonParams", get_jsonParams, set_jsonParams);
		L.RegVar("errorCode", get_errorCode, set_errorCode);
		L.RegVar("errorMsg", get_errorMsg, set_errorMsg);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHukiry_SDK_UnityParam(IntPtr L)
	{
		Hukiry.SDK.UnityParam obj = new Hukiry.SDK.UnityParam();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_funType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.SDK.UnityParam obj = (Hukiry.SDK.UnityParam)o;
			int ret = obj.funType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index funType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_jsonParams(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.SDK.UnityParam obj = (Hukiry.SDK.UnityParam)o;
			string ret = obj.jsonParams;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index jsonParams on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_errorCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.SDK.UnityParam obj = (Hukiry.SDK.UnityParam)o;
			int ret = obj.errorCode;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index errorCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_errorMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.SDK.UnityParam obj = (Hukiry.SDK.UnityParam)o;
			string ret = obj.errorMsg;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index errorMsg on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_funType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.SDK.UnityParam obj = (Hukiry.SDK.UnityParam)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.funType = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index funType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_jsonParams(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.SDK.UnityParam obj = (Hukiry.SDK.UnityParam)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.jsonParams = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index jsonParams on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_errorCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.SDK.UnityParam obj = (Hukiry.SDK.UnityParam)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.errorCode = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index errorCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_errorMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.SDK.UnityParam obj = (Hukiry.SDK.UnityParam)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.errorMsg = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index errorMsg on a nil value");
		}
	}
}

