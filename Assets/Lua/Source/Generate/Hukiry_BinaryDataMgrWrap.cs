//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Hukiry_BinaryDataMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Hukiry.BinaryDataMgr), typeof(System.Object));
		L.RegFunction("ReadBinary", ReadBinary);
		L.RegFunction("SaveBinary", SaveBinary);
		L.RegFunction("SaveText", SaveText);
		L.RegFunction("ReadText", ReadText);
		L.RegFunction("DeleteFile", DeleteFile);
		L.RegFunction("DeleteDir", DeleteDir);
		L.RegFunction("New", _CreateHukiry_BinaryDataMgr);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("instance", get_instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHukiry_BinaryDataMgr(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Hukiry.BinaryDataMgr obj = new Hukiry.BinaryDataMgr();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Hukiry.BinaryDataMgr.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBinary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Hukiry.BinaryDataMgr obj = (Hukiry.BinaryDataMgr)ToLua.CheckObject<Hukiry.BinaryDataMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<Hukiry.Socket.ByteBlock> arg1 = (System.Action<Hukiry.Socket.ByteBlock>)ToLua.CheckDelegate<System.Action<Hukiry.Socket.ByteBlock>>(L, 3);
			obj.ReadBinary(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveBinary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Hukiry.BinaryDataMgr obj = (Hukiry.BinaryDataMgr)ToLua.CheckObject<Hukiry.BinaryDataMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<Hukiry.Socket.ByteBlock> arg1 = (System.Action<Hukiry.Socket.ByteBlock>)ToLua.CheckDelegate<System.Action<Hukiry.Socket.ByteBlock>>(L, 3);
			obj.SaveBinary(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Hukiry.BinaryDataMgr obj = (Hukiry.BinaryDataMgr)ToLua.CheckObject<Hukiry.BinaryDataMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SaveText(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Hukiry.BinaryDataMgr obj = (Hukiry.BinaryDataMgr)ToLua.CheckObject<Hukiry.BinaryDataMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<string> arg1 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 3);
			obj.ReadText(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.BinaryDataMgr obj = (Hukiry.BinaryDataMgr)ToLua.CheckObject<Hukiry.BinaryDataMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DeleteFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.BinaryDataMgr obj = (Hukiry.BinaryDataMgr)ToLua.CheckObject<Hukiry.BinaryDataMgr>(L, 1);
			obj.DeleteDir();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Hukiry.BinaryDataMgr.instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

