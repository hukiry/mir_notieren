//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Hukiry_SDK_SdkManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Hukiry.SDK.SdkManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("InitSDKInformation", InitSDKInformation);
		L.RegFunction("RegeditFunction", RegeditFunction);
		L.RegFunction("CallSDKFunction", CallSDKFunction);
		L.RegFunction("GetCallSDKFunction", GetCallSDKFunction);
		L.RegFunction("getLanguageCode", getLanguageCode);
		L.RegFunction("getAppVersionName", getAppVersionName);
		L.RegFunction("isShowAppleLogin", isShowAppleLogin);
		L.RegFunction("getDeviceModel", getDeviceModel);
		L.RegFunction("ChanageLocalizedText", ChanageLocalizedText);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ins", get_ins, null);
		L.RegVar("AppleLoginVerify", get_AppleLoginVerify, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitSDKInformation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
			obj.InitSDKInformation();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegeditFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
			Hukiry.SDK.CallBackJsonParamHandler arg0 = (Hukiry.SDK.CallBackJsonParamHandler)ToLua.CheckDelegate<Hukiry.SDK.CallBackJsonParamHandler>(L, 2);
			obj.RegeditFunction(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallSDKFunction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
				Hukiry.SDK.UnityParam arg0 = StackTraits<Hukiry.SDK.UnityParam>.Check(L, 2);
				obj.CallSDKFunction(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.CallSDKFunction(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Hukiry.SDK.SdkManager.CallSDKFunction");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCallSDKFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.GetCallSDKFunction(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getLanguageCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
			string o = obj.getLanguageCode();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getAppVersionName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
			string o = obj.getAppVersionName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isShowAppleLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
			bool o = obj.isShowAppleLogin();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getDeviceModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
			string o = obj.getDeviceModel();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChanageLocalizedText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)ToLua.CheckObject<Hukiry.SDK.SdkManager>(L, 1);
			obj.ChanageLocalizedText();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ins(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Hukiry.SDK.SdkManager.ins);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppleLoginVerify(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.SDK.SdkManager obj = (Hukiry.SDK.SdkManager)o;
			Hukiry.SDK.AppleLoginVerify ret = obj.AppleLoginVerify;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AppleLoginVerify on a nil value");
		}
	}
}

