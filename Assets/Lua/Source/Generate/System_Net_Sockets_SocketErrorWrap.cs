//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_Sockets_SocketErrorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(System.Net.Sockets.SocketError));
		L.RegVar("Success", get_Success, null);
		L.RegVar("SocketError", get_SocketError, null);
		L.RegVar("Interrupted", get_Interrupted, null);
		L.RegVar("AccessDenied", get_AccessDenied, null);
		L.RegVar("Fault", get_Fault, null);
		L.RegVar("InvalidArgument", get_InvalidArgument, null);
		L.RegVar("TooManyOpenSockets", get_TooManyOpenSockets, null);
		L.RegVar("WouldBlock", get_WouldBlock, null);
		L.RegVar("InProgress", get_InProgress, null);
		L.RegVar("AlreadyInProgress", get_AlreadyInProgress, null);
		L.RegVar("NotSocket", get_NotSocket, null);
		L.RegVar("DestinationAddressRequired", get_DestinationAddressRequired, null);
		L.RegVar("MessageSize", get_MessageSize, null);
		L.RegVar("ProtocolType", get_ProtocolType, null);
		L.RegVar("ProtocolOption", get_ProtocolOption, null);
		L.RegVar("ProtocolNotSupported", get_ProtocolNotSupported, null);
		L.RegVar("SocketNotSupported", get_SocketNotSupported, null);
		L.RegVar("OperationNotSupported", get_OperationNotSupported, null);
		L.RegVar("ProtocolFamilyNotSupported", get_ProtocolFamilyNotSupported, null);
		L.RegVar("AddressFamilyNotSupported", get_AddressFamilyNotSupported, null);
		L.RegVar("AddressAlreadyInUse", get_AddressAlreadyInUse, null);
		L.RegVar("AddressNotAvailable", get_AddressNotAvailable, null);
		L.RegVar("NetworkDown", get_NetworkDown, null);
		L.RegVar("NetworkUnreachable", get_NetworkUnreachable, null);
		L.RegVar("NetworkReset", get_NetworkReset, null);
		L.RegVar("ConnectionAborted", get_ConnectionAborted, null);
		L.RegVar("ConnectionReset", get_ConnectionReset, null);
		L.RegVar("NoBufferSpaceAvailable", get_NoBufferSpaceAvailable, null);
		L.RegVar("IsConnected", get_IsConnected, null);
		L.RegVar("NotConnected", get_NotConnected, null);
		L.RegVar("Shutdown", get_Shutdown, null);
		L.RegVar("TimedOut", get_TimedOut, null);
		L.RegVar("ConnectionRefused", get_ConnectionRefused, null);
		L.RegVar("HostDown", get_HostDown, null);
		L.RegVar("HostUnreachable", get_HostUnreachable, null);
		L.RegVar("ProcessLimit", get_ProcessLimit, null);
		L.RegVar("SystemNotReady", get_SystemNotReady, null);
		L.RegVar("VersionNotSupported", get_VersionNotSupported, null);
		L.RegVar("NotInitialized", get_NotInitialized, null);
		L.RegVar("Disconnecting", get_Disconnecting, null);
		L.RegVar("TypeNotFound", get_TypeNotFound, null);
		L.RegVar("HostNotFound", get_HostNotFound, null);
		L.RegVar("TryAgain", get_TryAgain, null);
		L.RegVar("NoRecovery", get_NoRecovery, null);
		L.RegVar("NoData", get_NoData, null);
		L.RegVar("IOPending", get_IOPending, null);
		L.RegVar("OperationAborted", get_OperationAborted, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<System.Net.Sockets.SocketError>.Check = CheckType;
		StackTraits<System.Net.Sockets.SocketError>.Push = Push;
	}

	static void Push(IntPtr L, System.Net.Sockets.SocketError arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(System.Net.Sockets.SocketError), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Success(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Success);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketError(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.SocketError);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Interrupted(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Interrupted);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AccessDenied(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AccessDenied);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Fault(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Fault);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InvalidArgument(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.InvalidArgument);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TooManyOpenSockets(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.TooManyOpenSockets);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WouldBlock(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.WouldBlock);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InProgress(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.InProgress);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AlreadyInProgress(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AlreadyInProgress);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotSocket(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NotSocket);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DestinationAddressRequired(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.DestinationAddressRequired);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MessageSize(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.MessageSize);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolType(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProtocolType);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolOption(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProtocolOption);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProtocolNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SocketNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.SocketNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OperationNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.OperationNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolFamilyNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProtocolFamilyNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddressFamilyNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AddressFamilyNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddressAlreadyInUse(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AddressAlreadyInUse);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddressNotAvailable(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.AddressNotAvailable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetworkDown(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NetworkDown);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetworkUnreachable(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NetworkUnreachable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetworkReset(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NetworkReset);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionAborted(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ConnectionAborted);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionReset(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ConnectionReset);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoBufferSpaceAvailable(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NoBufferSpaceAvailable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsConnected(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.IsConnected);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotConnected(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NotConnected);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Shutdown(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Shutdown);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TimedOut(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.TimedOut);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionRefused(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ConnectionRefused);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HostDown(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.HostDown);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HostUnreachable(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.HostUnreachable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProcessLimit(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.ProcessLimit);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SystemNotReady(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.SystemNotReady);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VersionNotSupported(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.VersionNotSupported);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotInitialized(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NotInitialized);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Disconnecting(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.Disconnecting);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TypeNotFound(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.TypeNotFound);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HostNotFound(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.HostNotFound);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TryAgain(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.TryAgain);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoRecovery(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NoRecovery);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoData(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.NoData);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IOPending(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.IOPending);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OperationAborted(IntPtr L)
	{
		ToLua.Push(L, System.Net.Sockets.SocketError.OperationAborted);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		System.Net.Sockets.SocketError o = (System.Net.Sockets.SocketError)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

