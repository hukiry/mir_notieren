//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_TextAlignmentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.TextAlignment));
		L.RegVar("Left", get_Left, null);
		L.RegVar("Center", get_Center, null);
		L.RegVar("Right", get_Right, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<UnityEngine.TextAlignment>.Check = CheckType;
		StackTraits<UnityEngine.TextAlignment>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.TextAlignment arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(UnityEngine.TextAlignment), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Left(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.TextAlignment.Left);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Center(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.TextAlignment.Center);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Right(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.TextAlignment.Right);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.TextAlignment o = (UnityEngine.TextAlignment)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

