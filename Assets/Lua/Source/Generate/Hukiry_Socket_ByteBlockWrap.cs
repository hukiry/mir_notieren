//this source code was auto-generated by tolua#, do not modify it
using System;
using Hukiry.Socket;
using LuaInterface;

public class Hukiry_Socket_ByteBlockWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Hukiry.Socket.ByteBlock), typeof(System.Object));
		L.RegFunction("ToArray", ToArray);
		L.RegFunction("Write", Write);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("WriteFloat", WriteFloat);
		L.RegFunction("ReadFloat", ReadFloat);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("WriteChar", WriteChar);
		L.RegFunction("ReadChar", ReadChar);
		L.RegFunction("ReadByte", ReadByte);
		L.RegFunction("WriteBoolean", WriteBoolean);
		L.RegFunction("ReadBoolean", ReadBoolean);
		L.RegFunction("WriteUInt64", WriteUInt64);
		L.RegFunction("ReadUInt64", ReadUInt64);
		L.RegFunction("WriteUInt32", WriteUInt32);
		L.RegFunction("ReadUInt32", ReadUInt32);
		L.RegFunction("WriteUInt16", WriteUInt16);
		L.RegFunction("ReadUInt16", ReadUInt16);
		L.RegFunction("WriteInt64", WriteInt64);
		L.RegFunction("ReadInt64", ReadInt64);
		L.RegFunction("WriteInt32", WriteInt32);
		L.RegFunction("ReadInt32", ReadInt32);
		L.RegFunction("WriteInt16", WriteInt16);
		L.RegFunction("ReadInt16", ReadInt16);
		L.RegFunction("New", _CreateHukiry_Socket_ByteBlock);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Buffer", get_Buffer, null);
		L.RegVar("Length", get_Length, null);
		L.RegVar("Pos", get_Pos, set_Pos);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHukiry_Socket_ByteBlock(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Hukiry.Socket.ByteBlock obj = new Hukiry.Socket.ByteBlock();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				Hukiry.Socket.ByteBlock obj = new Hukiry.Socket.ByteBlock(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Hukiry.Socket.ByteBlock.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
				byte[] o = obj.ToArray();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				byte[] o = obj.ToArray(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Hukiry.Socket.ByteBlock.ToArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<byte>(L, 2))
			{
				Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
				byte arg0 = (byte)LuaDLL.lua_tonumber(L, 2);
				Hukiry.Socket.ByteBlock o = obj.Write(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 4)
			{
				Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Hukiry.Socket.ByteBlock.Write");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteDouble(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteFloat(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			float o = obj.ReadFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteString(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			string o = obj.ReadString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteChar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			char arg0 = (char)LuaDLL.luaL_checknumber(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteChar(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadChar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			char o = obj.ReadChar();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			byte o = obj.ReadByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteBoolean(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			bool o = obj.ReadBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteUInt64(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			ulong o = obj.ReadUInt64();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteUInt32(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			uint o = obj.ReadUInt32();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteUInt16(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			ushort o = obj.ReadUInt16();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteInt64(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			long o = obj.ReadInt64();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteInt32(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			int o = obj.ReadInt32();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			Hukiry.Socket.ByteBlock o = obj.WriteInt16(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)ToLua.CheckObject<Hukiry.Socket.ByteBlock>(L, 1);
			short o = obj.ReadInt16();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Buffer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)o;
			byte[] ret = obj.Buffer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Buffer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)o;
			int ret = obj.Length;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)o;
			int ret = obj.Pos;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pos on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Pos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Hukiry.Socket.ByteBlock obj = (Hukiry.Socket.ByteBlock)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Pos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pos on a nil value");
		}
	}
}

